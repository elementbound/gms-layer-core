<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Queue resources to load and wait 
ds_queue_enqueue(assets.queue, "mesh/gen", "cylinder", meshgen_cylinder, 6); 
ds_queue_enqueue(assets.queue, "mesh/gen", "sphere", meshgen_uvsphere, 32); 

ds_queue_enqueue(assets.queue, "texture", "earth-ramp", "textures/earth-gradient.png");
ds_queue_enqueue(assets.queue, "texture", "grass-ramp", "textures/grass-ramp.png");
ds_queue_enqueue(assets.queue, "texture", "lava-ramp", "textures/lava-ramp.png");
ds_queue_enqueue(assets.queue, "texture", "grass-noise", "textures/grass-noise.png");
ds_queue_enqueue(assets.queue, "texture", "lava-noise", "textures/lava-noise.png");
ds_queue_enqueue(assets.queue, "texture", "sides", "textures/sides.png");

done = false; 

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if loading is done, then create scene
if(assets.working) {
    alarm[0] = 1;
    exit;
}

with(instance_create(0,0, camera_orbit)) {
    distance = 1.5;
    zfar = 64;
    fov = 145;
    
    rotx = -30;
    rotz = 30;
}

core_layers = ds_list_create();
var n = 8;
for(var i = 0; i &lt; n; i++) {
    with(instance_create(0,0, mesh_object)) {
        scalx = lerp(1, 1.25, i/n);
        scaly = scalx;
        scalz = scalx;
    
        data = assets.meshes[?"sphere"];
        texture = assets.textures[?"lava-noise"];
        
        shader = shd_lava;
        samplers[?"u_Ramp"] = assets.textures[?"lava-ramp"];
        uniforms[?"u_Subtract"] = array(i/n);
        
        ds_list_add(other.core_layers, id); 
    }
}

done = true; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!done)
    exit;
    
var f = (get_time() mod 30000) / 30000;
with(camera)
    rotz = f * 360;
    
var f = (get_time() mod 16000) / 16000;
f = (1 + sin(f*2*pi))/2; 

var p = lerp(2, 0.5, f);
var n = ds_list_size(core_layers); 
for(var i = 0; i &lt; n; i++) {
    with(core_layers[|i]) {
        uniforms[?"u_Subtract"] = array(lerp(0, 0.875, power(i/n, p)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
