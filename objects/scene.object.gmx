<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Queue resources to load and wait 
ds_queue_enqueue(assets.queue, "mesh/gen", "cylinder", meshgen_cylinder, 6); 
ds_queue_enqueue(assets.queue, "mesh/gen", "sphere", meshgen_uvsphere, 32); 

ds_queue_enqueue(assets.queue, "texture", "earth-ramp", "textures/earth-gradient.png");
ds_queue_enqueue(assets.queue, "texture", "grass-ramp", "textures/grass-ramp.png");
ds_queue_enqueue(assets.queue, "texture", "lava-ramp", "textures/lava-ramp.png");
ds_queue_enqueue(assets.queue, "texture", "grass-noise", "textures/grass-noise.png");
ds_queue_enqueue(assets.queue, "texture", "lava-noise", "textures/lava-noise.png");
ds_queue_enqueue(assets.queue, "texture", "sides", "textures/sides.png");

done = false; 

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if loading is done, then create scene
if(assets.working) {
    alarm[0] = 1;
    exit;
}

// Create scene, start with camera 
with(instance_create(0,0, camera_orbit)) {
    distance = 1.5;
    zfar = 64;
    fov = 145;
    
    rotx = -30;
    rotz = 30;
}

// Create earth 'crust'
pillars = ds_list_create(); 
var n = irandom_range(48,64);
for(var i = 0; i &lt; n; i++) {
    with(instance_create(0,0, mesh_object)) {
        data = assets.meshes[?"cylinder"]; 
        texture = assets.textures[?"earth-ramp"]; 
        
        // Could just use this, but its distribution is denser towards the poles
        ///rotx = random(360);
        //rotz = random(360); 
        
        // Instead create a random vector, use as orientation
        var ox, oy, oz;
        ox = random_range(1,-1);
        oy = random_range(1,-1);
        oz = random_range(1,-1);
        
        rotz = point_direction(0,0, ox,oy);
        rotx = point_direction(0,0, point_distance(0,0, ox,oy), oz) + 90; 
        
        scalx = random_range(0.0875, 0.125);
        scaly = scalx;
        scalz = random_range(1.25, 1.5); 
        
        shader = shd_earth; 
        
        samplers[?"u_Sides"] = assets.textures[?"sides"];
        samplers[?"u_Noise"] = assets.textures[?"grass-noise"];
        samplers[?"u_GrassRamp"] = assets.textures[?"grass-ramp"]; 
        
        uniforms[?"u_GrassStart"] = random_range(0.925, 0.975);
        uniforms[?"u_SideIntensity"] = random_range(0.75, 1);
        uniforms[?"u_Ambient"] = array(0.95/4, 0.325/4, 0.0/4, 0.0);
        uniforms[?"u_TextureMatrix"] = matrix_build(irandom(32)/32,0,0, 0,0,0, 6/32,1,1);
        
        base_scale = scalz; 
        swing_strength = random_range(1/48, 1/32) / (base_scale*2);
        swing_time = 2000 * power(2, irandom(8) / 4);
        swing_offset = random(swing_time);
        
        ds_list_add(other.pillars, id); 
    }
}

// Create core
core_layers = ds_list_create();
var n = 8;
for(var i = n; i &gt; 0; i--) {
    with(instance_create(0,0, mesh_object)) {
        scalx = lerp(1, 1.41421356, i/n);
        scaly = scalx;
        scalz = scalx;
    
        data = assets.meshes[?"sphere"];
        texture = assets.textures[?"lava-noise"];
        
        shader = shd_lava;
        samplers[?"u_Ramp"] = assets.textures[?"lava-ramp"];
        uniforms[?"u_Subtract"] = i/n;
        
        ds_list_insert(other.core_layers, 0, id); 
    }
}

done = true; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!done)
    exit;
    
var f = (get_time() mod 30000) / 30000;
with(camera)
    rotz = f * 360;
    
var f = (get_time() mod 16000) / 16000;
f = (1 + sin(f*2*pi))/2; 

var p = lerp(2, 0.5, f);
var n = ds_list_size(core_layers); 
for(var i = 0; i &lt; n; i++) {
    with(core_layers[|i]) {
        uniforms[?"u_Subtract"] = lerp(0, 0.875, power(i/n, p));
    }
}

var n = ds_list_size(pillars);
for(var i = 0; i &lt; n; i++) {
    with(pillars[|i]) {
        var f = ((get_time() - swing_offset) mod swing_time) / swing_time; 
        f = (1+sin(f*2*pi))/2;
        scalz = base_scale * lerp(1-swing_strength, 1+swing_strength, f);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
